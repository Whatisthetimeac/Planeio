import numpy as np
import matplotlib.pyplot as plt
import math

# Inputs
s = 1.1395
CD0 = 0.0156
g = 9.80665
carga = 12.46
CL_max = 1.9285
AR = 4
e = 0.7
K = 1 / (3.14 * e * AR)
b = 2.15
Po = 101.325
L = 0.0065
R = 8.31447
M = 0.0289644
To = 294.52

altura = int(input("Qual a altura de início do Planeio? (Em metros)"))
h = int(input("Qual a altitude (Em metros)?"))
passo = float(input("Qual o passo?"))

# Inicialmente definir dados a serem usados na análise

# Peso
W = carga * g

def Temperatura(h):
    return (To - (L * h))

def Pressao(h):
    return (Po * ((1 - ((L * h) / To)) ** ((g * M) / (R * L))))

def Densidade(P, T):
    return (1000 * P * M) / (R * T)

# Cálculo da densidade do ar inicial
T = Temperatura(h)
P = Pressao(h)
ρ = Densidade(P, T)
ρ0 = Densidade(Po, To)

# Análise de planeio

# Em casos extremos:

# Em máximo alcance

ClMAL = ((CD0 / K) ** 0.5)
CdMAL = CD0 + (K * (ClMAL * 2))
EMAL = ClMAL / CdMAL
GammaMAL = 1 / EMAL
VelocidadeMAL = (((2 * W * math.cos(GammaMAL)) / ρ * s * ClMAL) ** 0.5)
VhMAL = (VelocidadeMAL * math.cos(GammaMAL))
RDMAL = (VelocidadeMAL * math.sin(GammaMAL))
GammaMALg = np.degrees(GammaMAL)
disthMAL = altitude / math.tan(GammaMAL)

print(f"\n Em máximo alcance:")
print("Ângulo de Planeio:", GammaMAL)
print("Ângulo de Planeio (Em graus):", GammaMALg)
print("Velocidade de Planeio", VelocidadeMAL)
print("Velocidade horizontal:", VhMAL)
print("Razão de descida:", RDMAL)
print("Distância horizontal:", disthMAL)

# Em máxima autonomia

ClMAU = ((3 * CD0 / K) ** 0.5)
CdMAU = CD0 + (K * (ClMAU * 2))
EMAU = ClMAU / CdMAU
GammaMAU = 1 / EMAU
VelocidadeMAU = (((2 * W * math.cos(GammaMAU)) / ρ * s * ClMAU) ** 0.5)
VhMAU = (VelocidadeMAU * math.cos(GammaMAU))
RDMAU = (VelocidadeMAU * math.sin(GammaMAU))
GammaMAUg = np.degrees(GammaMAU)
disthMAU = altitude / math.tan(GammaMAU)

print(f"\n Em máxima autonomia:”)
print("Ângulo de Planeio:", GammaMAU)
print("Ângulo de Planeio (Em graus):", GammaMAUg)
print("Velocidade de Planeio", VelocidadeMAU)
print("Velocidade horizontal:", VhMAU)
print("Razão de descida:", RDMAU)
print("Distância horizontal:", disthMAU)

# Definir um valor inicial e final e dividir em pequenos intervalos de continuidade

# Definição dos intervalos de continuidade
Cl_inicial = 0.1
Cl_final = 1.5
passo_Cl = 0.1

# Listas para armazenar os valores
Cl_list = []
Velocidade_list = []

# Cálculo da polar das velocidades de planagem
Cl = Cl_inicial
while Cl <= Cl_final:
    Cd = CD0 + K * (Cl ** 2)
    E = Cl / Cd
    Gamma = 1 / E
    Velocidade = ((2 * W * math.cos(Gamma)) / (ρ * s * Cl)) ** 0.5
    Cl_list.append(Cl)
    Velocidade_list.append(Velocidade)
    
    Cl += passo_Cl

    print("Coeficiente de Sustentação (Cl):", Cl)
    print("Velocidade de Planeio:", Velocidade)
    print("---")

# Plotagem da polar das velocidades de planagem
plt.plot(Cl_list, Velocidade_list)
plt.xlabel('Coeficiente de Sustentação (Cl)')
plt.ylabel('Velocidade de Planeio')
plt.title('Polar das Velocidades de Planagem')
plt.grid(True)
plt.show()
```
